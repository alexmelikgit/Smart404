class Smart404_chart{constructor(t){if(this.canvas=t,!(this.canvas instanceof HTMLCanvasElement))throw"Canvas not exists";this.wrapper=this.canvas.closest(".graphics-wrapper"),this.configs={},this.redirectType=this.canvas.closest("[data-redirect-type]"),this.redirectType=this.redirectType?this.redirectType.getAttribute("data-redirect-type"):null,this.init()}init(){this.setButtons(),this.setFilter(),this.setDefConfigs(),this.chart=new Chart(this.canvas,this.configs),this.#setDefData()}setFilter(){this.filterInput=this.wrapper.querySelector("input[type=month].month-filter"),this.filterReset=this.wrapper.querySelector("button.filter-reset.btn"),this.filterInput&&this.filterReset&&(this.#setFilter(),this.filterReset.addEventListener("click",()=>{this.#setDefData()}))}setButtons(){this.setWeekButton(),this.setNextButton(),this.setBackButton()}setNextButton(){this.nextButton=this.wrapper.querySelector(".btn.next");let a=t=>{let e=t.getFullYear(),a=t.getMonth();11===t.getMonth()?(e++,a=0):a++,this.#setMonth(e,a+1)};this.nextButton&&this.nextButton.addEventListener("click",()=>{var t,e=this.wrapper.getAttribute("data-end")??null,e=e?Smart404_chart.getDateFromString(e):new Date;this.wrapper.hasAttribute("data-filter")&&"week"===this.wrapper.getAttribute("data-filter")?(t=new Date(e.getTime()+6048e5),this.wrapper.setAttribute("data-start",Smart404_chart.getStringFromDate(t)),this.#setWeek()):a(e)})}setBackButton(){this.backButton=this.wrapper.querySelector(".btn.back");const a=t=>{let e=t.getFullYear(),a=t.getMonth();0===t.getMonth()?(e--,a=11):a--,this.#setMonth(e,a+1)};this.backButton&&this.backButton.addEventListener("click",()=>{var t,e=this.wrapper.getAttribute("data-start")??null,e=e?Smart404_chart.getDateFromString(e):new Date;this.wrapper.hasAttribute("data-filter")&&"week"===this.wrapper.getAttribute("data-filter")?(t=new Date(e.getTime()-864e5),this.wrapper.setAttribute("data-start",Smart404_chart.getStringFromDate(t)),this.#setWeek()):a(e)})}setWeekButton(){this.weekButton=this.wrapper.querySelector(".switcher.week-btn"),this.weekButton&&(this.weekButton.callback=()=>{var t;this.wrapper.hasAttribute("data-filter")&&("month"===this.wrapper.getAttribute("data-filter")?(localStorage.setItem("chart-by-week",!0),this.wrapper.setAttribute("data-filter","week"),this.#setWeek()):(localStorage.setItem("chart-by-week",!1),this.wrapper.setAttribute("data-filter","month"),t=this.wrapper.hasAttribute("data-end")?Smart404_chart.getDateFromString(this.wrapper.getAttribute("data-end")):new Date,this.#setMonth(t.getFullYear(),t.getMonth()+1,!1)))})}#setDefData(){var t=new Date;this.wrapper.removeAttribute("data-start"),this.wrapper.removeAttribute("data-end"),"true"==localStorage.getItem("chart-by-week")?(this.#setWeek(),this.weekButton.classList.add("active")):this.#setMonth(t.getFullYear(),t.getMonth()+1)}#setFilter(){this.filterInput.addEventListener("change",()=>{this.weekButton.classList.remove("active");var t=this.filterInput.value.substring(0,4),e=this.filterInput.value.substring(5,7);this.wrapper.setAttribute("data-filter","month"),this.#setMonth(t,e)})}#setMonth(t,e,a=!0){var r=t+`-${e}-01`,t=t+`-${e}-`+Smart404_chart.getLastDayofMonth(t,e);this.#setData({start:r,end:t},a),this.wrapper.setAttribute("data-filter","month")}#setWeek(){var t=this.wrapper.hasAttribute("data-start")?this.wrapper.getAttribute("data-start"):Smart404_chart.getStringFromDate(new Date),e=new Date;t?(t=t.split("-"),this.#setData(this.#getWeek(new Date(t[0],parseInt(t[1])-1,t[2])))):(t=[e.getFullYear(),e.getMonth(),e.getDate()],this.#getWeek(new Date(t[0],parseInt(t[1])-1,t[2]))),this.wrapper.setAttribute("data-filter","week")}#getWeek(t=null){t=t??new Date;let e=null,a=null;return a=t.getDay()?(e=new Date(t.getTime()-24*t.getDay()*60*60*1e3),new Date(t.getTime()+24*(6-t.getDay())*60*60*1e3)):(e=t,new Date(t.getTime()+5184e5)),{start:Smart404_chart.getStringFromDate(e),end:Smart404_chart.getStringFromDate(a)}}static getStringFromDate(t){return`${t.getFullYear()}-${t.getMonth()+1}-`+t.getDate()}static getDateFromString(t){t=t.split("-");return new Date(t[0],parseInt(t[1])-1,t[2])}setDefConfigs(){this.configs={type:"line",data:{labels:[],datasets:[]},options:{scales:{x:{type:"time",time:{unit:"day"}},y:{beginAtZero:!0}}}}}static getLastDayofMonth(t,e){return new Date(t,e,0).getDate()}async#getData(t){var e=new FormData;return e.append("action","smart404_getdata"),e.append("date",JSON.stringify(t)),e.append("redirect_type",this.redirectType),(await fetch(ajaxurl,{body:e,method:"POST"})).json()}#setData(e,t=!0){this.wrapper.classList.add("loading"),this.#getData(e).then(t=>{t=[{label:new Date(e.end).toLocaleString("default",{month:"long"}),borderColor:"rgb(0,0,255)",tension:.1,data:t}];this.chart.config.options.scales.x.min=e.start,this.chart.config.options.scales.x.max=e.end,this.chart.data.datasets=t,this.chart.update(),this.wrapper.classList.remove("loading")}),t&&(this.wrapper.setAttribute("data-start",e.start),this.wrapper.setAttribute("data-end",e.end));var t=Smart404_chart.getDateFromString(e.start),a=t.getMonth()<9?"0"+(t.getMonth()+1):t.getMonth()+1;this.filterInput.value=t.getFullYear()+"-"+a}}export{Smart404_chart};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
