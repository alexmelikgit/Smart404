import{SmartErrors}from"./class.smarterrors.js?v=1.0.1";class RedirectForm{constructor(e){this.form=e,this.inputs=e.querySelectorAll("input[data-url]"),this.errorMessage=e.querySelector(".error-message"),this.init()}init(){this.form.addEventListener("submit",e=>{e.preventDefault();try{this.doRequest()}catch(e){console.error(e.message)}}),this.inputs.forEach(e=>{e.addEventListener("input",()=>{e.value=decodeURI(e.value),this.urlValidation(e)}),this.urlValidation(e)})}urlValidation(e){var t=new RegExp(/(https:\/\/www\.|http:\/\/www\.|https:\/\/|http:\/\/)?[a-zA-Z0-9]{2,}(\.[a-zA-Z0-9]{2,})(\.[a-zA-Z0-9]{2,})?/);e.value.length&&!t.test(e.value)?e.classList.add("url-error"):e.classList.remove("url-error")}doRequest(){this.errorMessage.innerHTML="";const e=new XMLHttpRequest;var t=new FormData(this.form);this.inputs.forEach(e=>{e.value.length||e.classList.add("error")}),t.append("action","sm404_custom_redirect_link"),e.open("POST",ajaxurl),e.send(t),e.onreadystatechange=()=>{4===e.readyState&&200===e.status&&(""===e.responseText?(this.inputs.forEach(e=>{e.value=""}),this.errorMessage.innerHTML="",this.form.closest(".popup-body").classList.remove("active"),window.location.reload()):this.errorMessage.innerHTML=e.responseText)}}}export{RedirectForm};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MucmVkaXJlY3Rmb3JtLmpzIiwic291cmNlcyI6WyJjbGFzcy5yZWRpcmVjdGZvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTbWFydEVycm9yc30gZnJvbSBcIi4vY2xhc3Muc21hcnRlcnJvcnMuanM/dj0xLjAuMVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlZGlyZWN0Rm9ybXtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50fSBmb3JtXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGZvcm0pIHtcclxuICAgICAgICB0aGlzLmZvcm0gPSBmb3JtO1xyXG4gICAgICAgIHRoaXMuaW5wdXRzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbZGF0YS11cmxdXCIpO1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gZm9ybS5xdWVyeVNlbGVjdG9yKFwiLmVycm9yLW1lc3NhZ2VcIilcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuICAgIGluaXQoKXtcclxuICAgICAgICB0aGlzLmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSk9PntcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb1JlcXVlc3QoKTtcclxuICAgICAgICAgICAgfWNhdGNoIChlKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5pbnB1dHMuZm9yRWFjaChpbnB1dD0+e1xyXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCk9PntcclxuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gZGVjb2RlVVJJKGlucHV0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXJsVmFsaWRhdGlvbihpbnB1dCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMudXJsVmFsaWRhdGlvbihpbnB1dCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0XHJcbiAgICAgKi9cclxuICAgIC8vaW5wdXQgVVJMIHZhbGlkYXRpb25cclxuICAgIHVybFZhbGlkYXRpb24oaW5wdXQpe1xyXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBSZWdFeHAoLyhodHRwczpcXC9cXC93d3dcXC58aHR0cDpcXC9cXC93d3dcXC58aHR0cHM6XFwvXFwvfGh0dHA6XFwvXFwvKT9bYS16QS1aMC05XXsyLH0oXFwuW2EtekEtWjAtOV17Mix9KShcXC5bYS16QS1aMC05XXsyLH0pPy8pXHJcbiAgICAgICAgaWYoaW5wdXQudmFsdWUubGVuZ3RoICYmICF1cmwudGVzdChpbnB1dC52YWx1ZSkpe1xyXG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKFwidXJsLWVycm9yXCIpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwidXJsLWVycm9yXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vQWpheCByZXF1ZXN0cyBmb3IgY3VzdG9tIHJlZGlyZWN0IGZvcm1cclxuICAgIGRvUmVxdWVzdCgpe1xyXG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgY29uc3QgeG1sID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLmZvcm0pO1xyXG4gICAgICAgIHRoaXMuaW5wdXRzLmZvckVhY2goaW5wdXQ9PntcclxuICAgICAgICAgICAgaWYoIWlucHV0LnZhbHVlLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGRhdGEuYXBwZW5kKFwiYWN0aW9uXCIsIFwic200MDRfY3VzdG9tX3JlZGlyZWN0X2xpbmtcIik7XHJcbiAgICAgICAgeG1sLm9wZW4oXCJQT1NUXCIsIGFqYXh1cmwpO1xyXG4gICAgICAgIHhtbC5zZW5kKGRhdGEpO1xyXG4gICAgICAgIHhtbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKT0+e1xyXG4gICAgICAgICAgICBpZih4bWwucmVhZHlTdGF0ZSA9PT0gNCl7XHJcbiAgICAgICAgICAgICAgICBpZih4bWwuc3RhdHVzID09PSAyMDApe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHhtbC5yZXNwb25zZVRleHQgPT09IFwiXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0cy5mb3JFYWNoKGlucHV0PT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS5jbG9zZXN0KFwiLnBvcHVwLWJvZHlcIikuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yTWVzc2FnZS5pbm5lckhUTUwgPSB4bWwucmVzcG9uc2VUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsiU21hcnRFcnJvcnMiLCJSZWRpcmVjdEZvcm0iLCJjb25zdHJ1Y3RvciIsImZvcm0iLCJ0aGlzIiwiaW5wdXRzIiwicXVlcnlTZWxlY3RvckFsbCIsImVycm9yTWVzc2FnZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbml0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRvUmVxdWVzdCIsImNvbnNvbGUiLCJlcnJvciIsIm1lc3NhZ2UiLCJmb3JFYWNoIiwiaW5wdXQiLCJ2YWx1ZSIsImRlY29kZVVSSSIsInVybFZhbGlkYXRpb24iLCJ1cmwiLCJSZWdFeHAiLCJsZW5ndGgiLCJ0ZXN0IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiaW5uZXJIVE1MIiwieG1sIiwiWE1MSHR0cFJlcXVlc3QiLCJkYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJvcGVuIiwiYWpheHVybCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwiY2xvc2VzdCIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVsb2FkIl0sIm1hcHBpbmdzIjoiT0FBUUEsV0FBa0QsS0FBaEMsdUNBRWJDLGFBS1RDLFlBQVlDLEdBQ1JDLEtBQUtELEtBQU9BLEVBQ1pDLEtBQUtDLE9BQVNGLEVBQUtHLGlCQUFpQixpQkFBaUIsRUFDckRGLEtBQUtHLGFBQWVKLEVBQUtLLGNBQWMsZ0JBQWdCLEVBQ3ZESixLQUFLSyxLQUFLLENBQ2QsQ0FDQUEsT0FDSUwsS0FBS0QsS0FBS08saUJBQWlCLFNBQVUsSUFDakNDLEVBQUVDLGVBQWUsRUFDakIsSUFDSVIsS0FBS1MsVUFBVSxDQUduQixDQUZDLE1BQU9GLEdBQ0pHLFFBQVFDLE1BQU1KLEVBQUVLLE9BQU8sQ0FDM0IsQ0FDSixDQUFDLEVBQ0RaLEtBQUtDLE9BQU9ZLFFBQVFDLElBQ2hCQSxFQUFNUixpQkFBaUIsUUFBUyxLQUM1QlEsRUFBTUMsTUFBUUMsVUFBVUYsRUFBTUMsS0FBSyxFQUNuQ2YsS0FBS2lCLGNBQWNILENBQUssQ0FDNUIsQ0FBQyxFQUNEZCxLQUFLaUIsY0FBY0gsQ0FBSyxDQUM1QixDQUFDLENBQ0wsQ0FPQUcsY0FBY0gsR0FDVixJQUFNSSxFQUFNLElBQUlDLE9BQU8sOEdBQThHLEVBQ2xJTCxFQUFNQyxNQUFNSyxRQUFVLENBQUNGLEVBQUlHLEtBQUtQLEVBQU1DLEtBQUssRUFDMUNELEVBQU1RLFVBQVVDLElBQUksV0FBVyxFQUUvQlQsRUFBTVEsVUFBVUUsT0FBTyxXQUFXLENBRTFDLENBRUFmLFlBQ0lULEtBQUtHLGFBQWFzQixVQUFZLEdBQzlCLE1BQU1DLEVBQU0sSUFBSUMsZUFDaEIsSUFBTUMsRUFBTyxJQUFJQyxTQUFTN0IsS0FBS0QsSUFBSSxFQUNuQ0MsS0FBS0MsT0FBT1ksUUFBUUMsSUFDWkEsRUFBTUMsTUFBTUssUUFDWk4sRUFBTVEsVUFBVUMsSUFBSSxPQUFPLENBRW5DLENBQUMsRUFDREssRUFBS0UsT0FBTyxTQUFVLDRCQUE0QixFQUNsREosRUFBSUssS0FBSyxPQUFRQyxPQUFPLEVBQ3hCTixFQUFJTyxLQUFLTCxDQUFJLEVBQ2JGLEVBQUlRLG1CQUFxQixLQUNDLElBQW5CUixFQUFJUyxZQUNlLE1BQWZULEVBQUlVLFNBQ3FCLEtBQXJCVixFQUFJVyxjQUNIckMsS0FBS0MsT0FBT1ksUUFBUUMsSUFDaEJBLEVBQU1DLE1BQVEsRUFDbEIsQ0FBQyxFQUNEZixLQUFLRyxhQUFhc0IsVUFBWSxHQUM5QnpCLEtBQUtELEtBQUt1QyxRQUFRLGFBQWEsRUFBRWhCLFVBQVVFLE9BQU8sUUFBUSxFQUMxRGUsT0FBT0MsU0FBU0MsT0FBTyxHQUV2QnpDLEtBQUtHLGFBQWFzQixVQUFZQyxFQUFJVyxhQU1sRCxDQUVKLENBQ0osUUEzRWF4QyxZQTJFYiJ9
